{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Curso de MicroPython En esta pagina encontraras los contenidos para poder instalar y utilizar MicroPython en las placas programables ESP32 y Raspberry Pi Pico (W). Contenidos Instalar Entorno Dispositivos Instalacion MicroPython Primeros Pasos Ejercicios Finales Recursos Un saludo especial a mis alumnos del MEDAC que andan el \u00faltimo d\u00eda de clase dandolo todo.","title":"Home"},{"location":"#curso-de-micropython","text":"En esta pagina encontraras los contenidos para poder instalar y utilizar MicroPython en las placas programables ESP32 y Raspberry Pi Pico (W).","title":"Curso de MicroPython"},{"location":"#contenidos","text":"Instalar Entorno Dispositivos Instalacion MicroPython Primeros Pasos Ejercicios Finales Recursos Un saludo especial a mis alumnos del MEDAC que andan el \u00faltimo d\u00eda de clase dandolo todo.","title":"Contenidos"},{"location":"devices/","text":"Dispositivos En este peque\u00f1o taller, vamos a centrarnos en dos dispositivos: ESP32 Raspberry Pi Pico Cada uno de estos microcontroladores, es compatible con MicroPython y con otros muchos lenguajes y herramientas. Ambos microcontroladores permiten ser programados en muchos lenguajes como puede ser C, Arduino, Node.js y por supuesto en MicroPython. Son muy sencillas de utilizar y tienen mucho soporte por la comunidad. Vamos a ver cada una de estas placas para conocer sus caracter\u00edsticas. ESP32 La ESP32, es un microcontrolador de espresiff, que es muy versatil y tiene mucha potencia comparado con otros microcontroladores de la misma familia. Tiene soporte para muchos lenguajes, pero en este caso lo utilizaremos para MicroPython. Entre sus caracter\u00edsticas estan: CPU: microprocesador de 32 bits a doble nucleo operando a 160Mhz o 240Mhz. Memoria: 520KB de SRAM Conectividad inhal\u00e1mbrica: Wifi: 802.11 b/g/n Bluetooth: BLE y v4.2 Interfaces: 2x 8 bit DAC 4x SPI 3x UART 2x I2C 12 Bit ADC Puede encontrar m\u00e1s informaci\u00f3n sobre esta placa en: https://es.wikipedia.org/wiki/ESP32 Mostramos ademas el PInOut de la ESP-wROOm: Rasperry Pi Pico Raspberry Pi Pico, es una placa programable basado en el microcontrolador RP2040; dise\u00f1ado para esta placa. Permite ser programada por varios lenguajes y entre ellos micropython. Existen varias versiones de esta placa ya que algunas incluyen wifi y otras no. Las versiones que podemos encontrar son: Raspberry Pi Pico (H) Raspberry Pi Pico W (WH) con conexi\u00f3n inhal\u00e1mbrica. Las caracter\u00edsticas de esta placa son: Procesador Dual-core ARM Cortex M0+ hasta 133Mhz. 264KB de RAM y 2MB de memoria Flash USB 1.1 como dispositivo y como host 26 GPIO 2xSPI, 2x I2C, 2x UART 12 Bit ADC y 16 canales PWM. Conexi\u00f3n Wifi con soporte WPA3 (S\u00f3lo Raspberry Pi Pico) Puedes encontrar m\u00e1s informaci\u00f3n sobre Raspberry Pi Pico en su p\u00e1gina oficial: Raspberry Pi Pico Dejamos adem\u00e1s, el Piout de una raspberry Pi Pico Raspberry Pi Pico Raspberry Pi Pico W","title":"Dispositivos"},{"location":"devices/#dispositivos","text":"En este peque\u00f1o taller, vamos a centrarnos en dos dispositivos: ESP32 Raspberry Pi Pico Cada uno de estos microcontroladores, es compatible con MicroPython y con otros muchos lenguajes y herramientas. Ambos microcontroladores permiten ser programados en muchos lenguajes como puede ser C, Arduino, Node.js y por supuesto en MicroPython. Son muy sencillas de utilizar y tienen mucho soporte por la comunidad. Vamos a ver cada una de estas placas para conocer sus caracter\u00edsticas.","title":"Dispositivos"},{"location":"devices/#esp32","text":"La ESP32, es un microcontrolador de espresiff, que es muy versatil y tiene mucha potencia comparado con otros microcontroladores de la misma familia. Tiene soporte para muchos lenguajes, pero en este caso lo utilizaremos para MicroPython. Entre sus caracter\u00edsticas estan: CPU: microprocesador de 32 bits a doble nucleo operando a 160Mhz o 240Mhz. Memoria: 520KB de SRAM Conectividad inhal\u00e1mbrica: Wifi: 802.11 b/g/n Bluetooth: BLE y v4.2 Interfaces: 2x 8 bit DAC 4x SPI 3x UART 2x I2C 12 Bit ADC Puede encontrar m\u00e1s informaci\u00f3n sobre esta placa en: https://es.wikipedia.org/wiki/ESP32 Mostramos ademas el PInOut de la ESP-wROOm:","title":"ESP32"},{"location":"devices/#rasperry-pi-pico","text":"Raspberry Pi Pico, es una placa programable basado en el microcontrolador RP2040; dise\u00f1ado para esta placa. Permite ser programada por varios lenguajes y entre ellos micropython. Existen varias versiones de esta placa ya que algunas incluyen wifi y otras no. Las versiones que podemos encontrar son: Raspberry Pi Pico (H) Raspberry Pi Pico W (WH) con conexi\u00f3n inhal\u00e1mbrica. Las caracter\u00edsticas de esta placa son: Procesador Dual-core ARM Cortex M0+ hasta 133Mhz. 264KB de RAM y 2MB de memoria Flash USB 1.1 como dispositivo y como host 26 GPIO 2xSPI, 2x I2C, 2x UART 12 Bit ADC y 16 canales PWM. Conexi\u00f3n Wifi con soporte WPA3 (S\u00f3lo Raspberry Pi Pico) Puedes encontrar m\u00e1s informaci\u00f3n sobre Raspberry Pi Pico en su p\u00e1gina oficial: Raspberry Pi Pico Dejamos adem\u00e1s, el Piout de una raspberry Pi Pico Raspberry Pi Pico Raspberry Pi Pico W","title":"Rasperry Pi Pico"},{"location":"final/","text":"Proyecto Final Para afianzar conocimientos o poder llegar un poco m\u00e1s all\u00e1. Os dejamos dos ejercicios que pod\u00e9is hacer. Sensor Temperatura Para este ejercicio, se necesitar\u00e1 los siguientes materiales: 1 Placa ESP32 o Raspberry Pi Pico 1 BreadBoard 1 Sensor Temperatura HC-11 1 led 1 resistencia 220Ohmios cables Dupont Seguidamente dejamos el montaje: Por aqu\u00ed el c\u00f3digo del lector; en este caso, enceder\u00e1 el led si se llega a un umbral de temperatura y humedad: import dht from machine import Pin pindht = Pin(0) ledpin = Pin(2, Pin.OUT) dht11 = dht.DHT11(pindht) while True: dht1.measure() temp = dht11.temperature() hum = dht11. humidity() if temp > 24 or hum > 55: ledpin.value(1) else: ledpin.value(0) Sensor Ultrasonidos Para este ejercicio, necesitar\u00e9is los siguientes materiales: 1 Placa ESP32 o Raspberry Pi Pico 1 breadBoard 1 Sensor Ultrasonidos HCSR-04 1 led 1 resistencia 220 Ohmios Cables Dupont Tras esto, realizamos el siguiente montaje. Una vez conectado, necesitaremos una librer\u00eda, para gestionar el sensor de ultrasonidos. Descargar el fichero python de la siguiente direcci\u00f3n: https://github.com/rsc1975/micropython-hcsr04 Por \u00faltimo, crear el siguiente c\u00f3digo fuente: from hcsr04 import HCSR04 from machine import Pin sensor = HCSR04(trigger_pin=16, echo_pin=0) led = Pin(2, Pin.OUT) while(True): distance= sensor.distance_cm() if distance < 5: led.value(1) else: led.value(0) Una vez escrito el c\u00f3digo ya podemos probarlo; viendo si funciona correctamente al poner un obstaculo cerca del sensor.","title":"Proyecto Final"},{"location":"final/#proyecto-final","text":"Para afianzar conocimientos o poder llegar un poco m\u00e1s all\u00e1. Os dejamos dos ejercicios que pod\u00e9is hacer. Sensor Temperatura Para este ejercicio, se necesitar\u00e1 los siguientes materiales: 1 Placa ESP32 o Raspberry Pi Pico 1 BreadBoard 1 Sensor Temperatura HC-11 1 led 1 resistencia 220Ohmios cables Dupont Seguidamente dejamos el montaje: Por aqu\u00ed el c\u00f3digo del lector; en este caso, enceder\u00e1 el led si se llega a un umbral de temperatura y humedad: import dht from machine import Pin pindht = Pin(0) ledpin = Pin(2, Pin.OUT) dht11 = dht.DHT11(pindht) while True: dht1.measure() temp = dht11.temperature() hum = dht11. humidity() if temp > 24 or hum > 55: ledpin.value(1) else: ledpin.value(0) Sensor Ultrasonidos Para este ejercicio, necesitar\u00e9is los siguientes materiales: 1 Placa ESP32 o Raspberry Pi Pico 1 breadBoard 1 Sensor Ultrasonidos HCSR-04 1 led 1 resistencia 220 Ohmios Cables Dupont Tras esto, realizamos el siguiente montaje. Una vez conectado, necesitaremos una librer\u00eda, para gestionar el sensor de ultrasonidos. Descargar el fichero python de la siguiente direcci\u00f3n: https://github.com/rsc1975/micropython-hcsr04 Por \u00faltimo, crear el siguiente c\u00f3digo fuente: from hcsr04 import HCSR04 from machine import Pin sensor = HCSR04(trigger_pin=16, echo_pin=0) led = Pin(2, Pin.OUT) while(True): distance= sensor.distance_cm() if distance < 5: led.value(1) else: led.value(0) Una vez escrito el c\u00f3digo ya podemos probarlo; viendo si funciona correctamente al poner un obstaculo cerca del sensor.","title":"Proyecto Final"},{"location":"getting_started/","text":"Primeros Pasos Una vez tenemos todo instalado, ya podemos empezar a utilizar nuestra placa. Usar el Interprete En nuestra placa esta instalado el interprete REPL como si de cualquier distribuci\u00f3n python se tratara. Por lo que podemos trabajar con este interprete y dar algunas ordenes. Si estamos utilizando Thonny, podemos verlo en la parte inferior de la pantalla. NOTA : Recuerda configurar correctamente el puerto de la placa a utilizar. Esto nos permitir\u00e1 interactuar directamente con nuestra placa. Primer Programa con MicroPython Vamos a ponernos ya manos a la obra; crearemos nuestro primer programa con MicroPython. Comenzando por lo m\u00e1s sencillo. Encender y apagar un Led. Primero, vamos a realizar nuestro primer montaje; por lo que necesitaremos los siguientes materiales: 1 placa ESP32 o Raspberry Pi PICO 1 BreadBoard 1 Led 1 Resistencia 220Ohmios cables Dupont Realizaremos el siguiente Montaje NOTA : En el caso de Raspberry Pi usar el mismo GPIO Una vez hecho esto, crearemos en thonny el siguiente c\u00f3digo Python. from machine import Pin from time import sleep #El Pin del led es el 2 que corresponde al GPIO2 ledpin=2 pin = Pin(ledpin, Pin.OUT) while True: pin.value(1) sleep(1) pin.value(0) sleep(1) NOTA : Dependiendo de la placa el n\u00famero de Pin puede cambiar. Para la Raspberry Pi Pico es el GPIO25 mientas para la Raspberry Pi Pico W es el GPIO0. Consulta la documentaci\u00f3n del fabricante. Una vez escrito, lo guardaremos. Cuando le demos a guardar, nos preguntar\u00e1 donde lo queremos almacenar; si en nuestro equipo, o en nuestra placa. Una vez almacenado, ya podemos verlo en nuestra placa. Podemos tener varios ficheros y verlos si pulsamos la opci\u00f3n Visualizaci\u00f3n->archivos . Podremos ver el listado de ficheros en nuestra placa y gestionarlos. Una vez subido el fichero y ejecutado, ya deber\u00edamos de poder ver parpadear nuestro led. NOTA : En caso de no verlo, comprueba la polaridad del Led la patilla Larga es siempre la negativa. Ejercicio con 2 Leds Os dejamos un Ejercicio con dos leds para que ve\u00e1is como funcionar\u00eda: Con el c\u00f3digo correspondiente. from machine import Pin from time import sleep ledpin=2 ledpin2=4 pin = Pin(ledpin, Pin.OUT) pin2 = Pin(ledpin2, Pin.OUT) while True: pin.value(1) pin2.value(1) sleep(1) pin.value(0) pin2.value(0) sleep(1) Botones Con MicroPython Tras ver como utilizar la salida a trav\u00e9s de los leds; vamos a tratar de utilizar pulsadores para poder utilizar las entradas del microcontrolador. En este caso tambi\u00e9n utilizaremos la clase Pin pero en este caso configuraremos cada puerto en modo IN. Para este montaje, usaremos los siguientes materiales: 1 Placa ESP32 o Raspberry Pi PIco 1 BreadBoard 1 Led 1 resistencia 220Ohmios o similar. 1 resistenia 1KOhmios o similar. 1 Boton cables Dupont Veamos el montaje: Y seguidamente mostramos el c\u00f3digo: from machine import Pin import time button=Pin(2,Pin.IN) led=Pin(16,Pin.OUT) while True: state=button.value() led.value(state) time.sleep(0.5) Ejercicio : Realizar un montaje que sea necesario pulsar 2 Botones para que se encienda el led.","title":"Primeros Pasos"},{"location":"getting_started/#primeros-pasos","text":"Una vez tenemos todo instalado, ya podemos empezar a utilizar nuestra placa.","title":"Primeros Pasos"},{"location":"getting_started/#usar-el-interprete","text":"En nuestra placa esta instalado el interprete REPL como si de cualquier distribuci\u00f3n python se tratara. Por lo que podemos trabajar con este interprete y dar algunas ordenes. Si estamos utilizando Thonny, podemos verlo en la parte inferior de la pantalla. NOTA : Recuerda configurar correctamente el puerto de la placa a utilizar. Esto nos permitir\u00e1 interactuar directamente con nuestra placa.","title":"Usar el Interprete"},{"location":"getting_started/#primer-programa-con-micropython","text":"Vamos a ponernos ya manos a la obra; crearemos nuestro primer programa con MicroPython. Comenzando por lo m\u00e1s sencillo. Encender y apagar un Led. Primero, vamos a realizar nuestro primer montaje; por lo que necesitaremos los siguientes materiales: 1 placa ESP32 o Raspberry Pi PICO 1 BreadBoard 1 Led 1 Resistencia 220Ohmios cables Dupont Realizaremos el siguiente Montaje NOTA : En el caso de Raspberry Pi usar el mismo GPIO Una vez hecho esto, crearemos en thonny el siguiente c\u00f3digo Python. from machine import Pin from time import sleep #El Pin del led es el 2 que corresponde al GPIO2 ledpin=2 pin = Pin(ledpin, Pin.OUT) while True: pin.value(1) sleep(1) pin.value(0) sleep(1) NOTA : Dependiendo de la placa el n\u00famero de Pin puede cambiar. Para la Raspberry Pi Pico es el GPIO25 mientas para la Raspberry Pi Pico W es el GPIO0. Consulta la documentaci\u00f3n del fabricante. Una vez escrito, lo guardaremos. Cuando le demos a guardar, nos preguntar\u00e1 donde lo queremos almacenar; si en nuestro equipo, o en nuestra placa. Una vez almacenado, ya podemos verlo en nuestra placa. Podemos tener varios ficheros y verlos si pulsamos la opci\u00f3n Visualizaci\u00f3n->archivos . Podremos ver el listado de ficheros en nuestra placa y gestionarlos. Una vez subido el fichero y ejecutado, ya deber\u00edamos de poder ver parpadear nuestro led. NOTA : En caso de no verlo, comprueba la polaridad del Led la patilla Larga es siempre la negativa.","title":"Primer Programa con MicroPython"},{"location":"getting_started/#ejercicio-con-2-leds","text":"Os dejamos un Ejercicio con dos leds para que ve\u00e1is como funcionar\u00eda: Con el c\u00f3digo correspondiente. from machine import Pin from time import sleep ledpin=2 ledpin2=4 pin = Pin(ledpin, Pin.OUT) pin2 = Pin(ledpin2, Pin.OUT) while True: pin.value(1) pin2.value(1) sleep(1) pin.value(0) pin2.value(0) sleep(1)","title":"Ejercicio con 2 Leds"},{"location":"getting_started/#botones-con-micropython","text":"Tras ver como utilizar la salida a trav\u00e9s de los leds; vamos a tratar de utilizar pulsadores para poder utilizar las entradas del microcontrolador. En este caso tambi\u00e9n utilizaremos la clase Pin pero en este caso configuraremos cada puerto en modo IN. Para este montaje, usaremos los siguientes materiales: 1 Placa ESP32 o Raspberry Pi PIco 1 BreadBoard 1 Led 1 resistencia 220Ohmios o similar. 1 resistenia 1KOhmios o similar. 1 Boton cables Dupont Veamos el montaje: Y seguidamente mostramos el c\u00f3digo: from machine import Pin import time button=Pin(2,Pin.IN) led=Pin(16,Pin.OUT) while True: state=button.value() led.value(state) time.sleep(0.5) Ejercicio : Realizar un montaje que sea necesario pulsar 2 Botones para que se encienda el led.","title":"Botones Con MicroPython"},{"location":"install/","text":"Instalaci\u00f3n MicroPython Una vez tenemos nuestro entorno instalado y nuestras placas listas, vamos a proceder a instalar en ellas el interprete de MicroPython. Dependiendo de la placa, las instrucciones son distintas pero vamos a ver varios m\u00e9todos de instalaci\u00f3n. Para este paso, ya necesitaremos conectar nuestras placas a trav\u00e9s de un cable USB (microUSB), para poder conectarlo a nuestro equipo. ESP32 Para quienes usen ESP32, necesitaran tener un par de cosas en cuenta. En primer lugar, si esta utilizando Windows, necesitar\u00e1 instalar los drivers para poder detectar la interfaz USB de nuestra placa. Para ello, necesitar\u00e1 instalar los drivers para el controlador CP210. Puedes encontrarlos en el siguiente enlace . Una vez instalados, ya solo queda descargar la \u00faltima versi\u00f3n del interprete de micropython para el ESP32. Puedes encontrarla en el siguiente enlace . Puedes encontrar m\u00e1s informaci\u00f3n sobre otras placas y versiones de MicroPython en la p\u00e1gina oficial: https://micropython.org Instalar usando Thonny El primer metodo de instalaci\u00f3n que veremos, es utilizando la utilidad que nos trae Thonny. Para ello, abriremos thonny y seleccionaremos el men\u00fa ejecutar->Elegir interprete... y en la pantalla seleccionaremos primero el tipo de interprete (MicroPython ESP32 o MicroPython Raspberry Pi Pico). Una vez hecho esto, pulsaremos en el enlace abajo derecha \"instalar o actualizar software\". En este dialogo, podremos seleccionar en primer lugar, el dispositivo (puerto COM o fichero /dev) y donde se encuentra el interprete a instalar. Si esta instalando en un ESP32, seleccione el fichero .bin que descarg\u00f3 anteriormente. Si esta instalando en una Raspberry Pi Pico, espere unos segundos a que la placa sea detectada. NOTA : Si no detecta la Raspberry pi Pico, pulse el bot\u00f3n bootsel de la placa mientras inserta el USB. Instalaci\u00f3n Manual En caso de ser necesario, se puede instalar manualmente el interprete de MicroPython. Para instalarlo, necesitaremos la herramienta esptool (Solo para ESP32). Que podemos instalar con pip. pip install esptool Una vez instalada, podemos pasar a instalar el interprete. ESP32 Para la placa ESP32, usaremos la herramienta anteriormente mencionada. Primero, borraremos la flash: # Cambia /dev/ttyUSB0 por el nombre del puerto (COMX en windows) esptool.py --chip esp32 --port /dev/ttyUSB0 erase_flash Una vez borrada la flash, podremos instalar el interprete: # No olvides cambiar tanto puerto como nombre del fichero esptool.py --chip esp32 --port /dev/ttyUSB0 --baud 460800 write_flash -z 0x1000 esp32-20190125-v1.10.bin Una vez hecho esto, ya puedes utilizar el interprete. Raspberry Pi Pico Con Raspberry Pi Pico, la instalaci\u00f3n es mucho m\u00e1s sencilla ya que no requiere de utilizar la herramienta esptool . Solo conecta la placa pulsando el bot\u00f3n bootsel y se montar\u00e1 un volumen en tu equipo (como si de una unidad USB se tratara). Despu\u00e9s descarga el interprete microPython para Raspberry Pi Pico: Raspberry Pi Pico Raspberry Pi Pico W Una vez decargado, pega el fichero en la unidad montada. Una vez terminado expulsa la unidad y ya estar\u00e1 instalado.","title":"Instalar MicroPython"},{"location":"install/#instalacion-micropython","text":"Una vez tenemos nuestro entorno instalado y nuestras placas listas, vamos a proceder a instalar en ellas el interprete de MicroPython. Dependiendo de la placa, las instrucciones son distintas pero vamos a ver varios m\u00e9todos de instalaci\u00f3n. Para este paso, ya necesitaremos conectar nuestras placas a trav\u00e9s de un cable USB (microUSB), para poder conectarlo a nuestro equipo.","title":"Instalaci\u00f3n MicroPython"},{"location":"install/#esp32","text":"Para quienes usen ESP32, necesitaran tener un par de cosas en cuenta. En primer lugar, si esta utilizando Windows, necesitar\u00e1 instalar los drivers para poder detectar la interfaz USB de nuestra placa. Para ello, necesitar\u00e1 instalar los drivers para el controlador CP210. Puedes encontrarlos en el siguiente enlace . Una vez instalados, ya solo queda descargar la \u00faltima versi\u00f3n del interprete de micropython para el ESP32. Puedes encontrarla en el siguiente enlace . Puedes encontrar m\u00e1s informaci\u00f3n sobre otras placas y versiones de MicroPython en la p\u00e1gina oficial: https://micropython.org","title":"ESP32"},{"location":"install/#instalar-usando-thonny","text":"El primer metodo de instalaci\u00f3n que veremos, es utilizando la utilidad que nos trae Thonny. Para ello, abriremos thonny y seleccionaremos el men\u00fa ejecutar->Elegir interprete... y en la pantalla seleccionaremos primero el tipo de interprete (MicroPython ESP32 o MicroPython Raspberry Pi Pico). Una vez hecho esto, pulsaremos en el enlace abajo derecha \"instalar o actualizar software\". En este dialogo, podremos seleccionar en primer lugar, el dispositivo (puerto COM o fichero /dev) y donde se encuentra el interprete a instalar. Si esta instalando en un ESP32, seleccione el fichero .bin que descarg\u00f3 anteriormente. Si esta instalando en una Raspberry Pi Pico, espere unos segundos a que la placa sea detectada. NOTA : Si no detecta la Raspberry pi Pico, pulse el bot\u00f3n bootsel de la placa mientras inserta el USB.","title":"Instalar usando Thonny"},{"location":"install/#instalacion-manual","text":"En caso de ser necesario, se puede instalar manualmente el interprete de MicroPython. Para instalarlo, necesitaremos la herramienta esptool (Solo para ESP32). Que podemos instalar con pip. pip install esptool Una vez instalada, podemos pasar a instalar el interprete.","title":"Instalaci\u00f3n Manual"},{"location":"install/#esp32_1","text":"Para la placa ESP32, usaremos la herramienta anteriormente mencionada. Primero, borraremos la flash: # Cambia /dev/ttyUSB0 por el nombre del puerto (COMX en windows) esptool.py --chip esp32 --port /dev/ttyUSB0 erase_flash Una vez borrada la flash, podremos instalar el interprete: # No olvides cambiar tanto puerto como nombre del fichero esptool.py --chip esp32 --port /dev/ttyUSB0 --baud 460800 write_flash -z 0x1000 esp32-20190125-v1.10.bin Una vez hecho esto, ya puedes utilizar el interprete.","title":"ESP32"},{"location":"install/#raspberry-pi-pico","text":"Con Raspberry Pi Pico, la instalaci\u00f3n es mucho m\u00e1s sencilla ya que no requiere de utilizar la herramienta esptool . Solo conecta la placa pulsando el bot\u00f3n bootsel y se montar\u00e1 un volumen en tu equipo (como si de una unidad USB se tratara). Despu\u00e9s descarga el interprete microPython para Raspberry Pi Pico: Raspberry Pi Pico Raspberry Pi Pico W Una vez decargado, pega el fichero en la unidad montada. Una vez terminado expulsa la unidad y ya estar\u00e1 instalado.","title":"Raspberry Pi Pico"},{"location":"install_env/","text":"Instalaci\u00f3n del Entorno En esta p\u00e1gina encontras informaci\u00f3n sobre que necesitaremos para trabajar con MicroPython. Los programas o utilidades que necesitaremos son: Python Thonny Pasaremos a repasar cada elemento: Python Para poder utilizar MicroPython y poder interactuar con las distintas placas, necesitaremos tener instalado Python 3.7 o superior. Podemos descargar Python desde el siguiente enlace . Tambien podemos utilizar el gestor de paquetes de nuestra distribucion (Linux). Para comprobar que version de python tenemos instalada, podemos usar el siguiente comando: python --version Tambi\u00e9n es importante instalar el gestor de paquetes pip ; para poder instalar las herramientas que necesitemos. Podemos comprobar que esta instalado con el siguiente comando: pip --version En caso de error, se puede usar el siguiente comando: python -m pip --version Para poder instalar pip usaremos el siguiente comando (En caso de no tenerlo instalado). python -m ensurepip --upgrade Thonny Para este curso, usaremos el editor Thonny el cual nos va a permitir subir y ejecutar programas en nuestra placa programable. Thonny es un editor muy ligero que esta construido en python y se puede utilizar de forma muy sencilla para crear nuestros programas tanto en local, como en MicroPython. Para instalar thonny, podemos realizarlo de dos formas Instalaci\u00f3n propia Nos descargaremos e instalaremos el software del siguiente enlace . Instalaci\u00f3n usando Pip Para instalar usando Pip podemos usar los siguientes comandos: pip install thonny pip install thonny-esp # instala las extensiones para micropython Despues simplemente escribiremos el siguiente comando: thonny En caso de error: python -m thonny","title":"instalar Entorno"},{"location":"install_env/#instalacion-del-entorno","text":"En esta p\u00e1gina encontras informaci\u00f3n sobre que necesitaremos para trabajar con MicroPython. Los programas o utilidades que necesitaremos son: Python Thonny Pasaremos a repasar cada elemento:","title":"Instalaci\u00f3n del Entorno"},{"location":"install_env/#python","text":"Para poder utilizar MicroPython y poder interactuar con las distintas placas, necesitaremos tener instalado Python 3.7 o superior. Podemos descargar Python desde el siguiente enlace . Tambien podemos utilizar el gestor de paquetes de nuestra distribucion (Linux). Para comprobar que version de python tenemos instalada, podemos usar el siguiente comando: python --version Tambi\u00e9n es importante instalar el gestor de paquetes pip ; para poder instalar las herramientas que necesitemos. Podemos comprobar que esta instalado con el siguiente comando: pip --version En caso de error, se puede usar el siguiente comando: python -m pip --version Para poder instalar pip usaremos el siguiente comando (En caso de no tenerlo instalado). python -m ensurepip --upgrade","title":"Python"},{"location":"install_env/#thonny","text":"Para este curso, usaremos el editor Thonny el cual nos va a permitir subir y ejecutar programas en nuestra placa programable. Thonny es un editor muy ligero que esta construido en python y se puede utilizar de forma muy sencilla para crear nuestros programas tanto en local, como en MicroPython. Para instalar thonny, podemos realizarlo de dos formas","title":"Thonny"},{"location":"install_env/#instalacion-propia","text":"Nos descargaremos e instalaremos el software del siguiente enlace .","title":"Instalaci\u00f3n propia"},{"location":"install_env/#instalacion-usando-pip","text":"Para instalar usando Pip podemos usar los siguientes comandos: pip install thonny pip install thonny-esp # instala las extensiones para micropython Despues simplemente escribiremos el siguiente comando: thonny En caso de error: python -m thonny","title":"Instalaci\u00f3n usando Pip"},{"location":"references/","text":"Referencias Documentaci\u00f3n MicroPython Curso MicroPython Python Canarias Documentaci\u00f3n Raspberry Pi Pico Recursos Sobre MicroPython Esquema Blink y Ejemplos","title":"Recursos"},{"location":"references/#referencias","text":"Documentaci\u00f3n MicroPython Curso MicroPython Python Canarias Documentaci\u00f3n Raspberry Pi Pico Recursos Sobre MicroPython Esquema Blink y Ejemplos","title":"Referencias"}]}